/* eslint-disable max-len */
/* eslint-disable no-inline-comments */
/* eslint-disable comma-spacing */
import test from 'tape';
import {normalizeArray, doPCA} from '../src/pca';
import {default as AlmostEqual, FLT_EPSILON} from 'almost-equal';

const arraysEqualish = (leftArr, rightArr) =>
  leftArr.every((row, idx) => AlmostEqual(leftArr[idx], rightArr[idx], 100 * FLT_EPSILON));

test('normalizeArray', t => {
  t.ok(arraysEqualish(normalizeArray(['0', '0']),
    [0, 0]), 'normalizeArray([0,0]); checking for stdv=0');
  t.ok(arraysEqualish(normalizeArray(['0', '1']),
    [-1, 1]), 'normalizeArray([0,1])');
  t.ok(arraysEqualish(normalizeArray(['-1.2247448713915889', '0', '1.2247448713915889']),
    [-1.2247448713915889, 0, 1.2247448713915889]), 'normalizeArray on pre-normalized array');
  t.ok(arraysEqualish(normalizeArray(['0', '1', '2', '3', '4', '5']),
    [-1.4638501094227998, -0.8783100656536799, -0.29277002188455997,
      0.29277002188455997, 0.8783100656536799, 1.4638501094227998]), 'normalizeArray([0..5])');
  t.ok(arraysEqualish(normalizeArray(['0', '1', '0', '0']),
    [-0.5773502691896258, 1.7320508075688774, -0.5773502691896258,
      -0.5773502691896258]), 'normalizeArray([0,1,0,0])');
  t.end();
});

// const A = [0, 2, 2, 4, 5];
// console.log('const nA =', normalizeArray(A));
const nA0 = [-1.4912022701586516, -0.3441236008058427, -0.3441236008058427, 0.8029550685469662, 1.3764944032233706];
// const B = [0, 1, 3, 3, 5];
// console.log('const nB =', normalizeArray(B));
const nB0 = [-1.3764944032233706, -0.8029550685469662, 0.3441236008058427, 0.3441236008058427, 1.4912022701586516];
const pcaData0 = doPCA({A: nA0, B: nB0}, {A: true, B: true});
// console.log(pcaData0);

test('doPCA(simple)', t => {
  t.ok(arraysEqualish(pcaData0.component0, [0.7071067811865476, 0.7071067811865475]) ||
       arraysEqualish(pcaData0.component0, [-0.7071067811865476, -0.7071067811865475]),
       'component0');
  t.ok(arraysEqualish(pcaData0.component1, [0.7071067811865476, -0.7071067811865475]) ||
       arraysEqualish(pcaData0.component1, [-0.7071067811865476, 0.7071067811865475]),
       'component1');
  t.ok(AlmostEqual(pcaData0.variance0, 9.539473684210527, 0, FLT_EPSILON), 'variance0');
  t.ok(AlmostEqual(pcaData0.variance1, 0.4605263157894731, 0, FLT_EPSILON), 'variance0');
  t.ok(AlmostEqual(pcaData0.varianceSum, 10, 0, FLT_EPSILON), 'varianceSum');
  t.ok(arraysEqualish(pcaData0.dataProjected[0], [1, -0.04000000000000013]), 'dataProjected0');
  t.ok(arraysEqualish(pcaData0.dataProjected[1], [0.39999999999999997, 0.15999999999999992]), 'dataProjected1');
  t.ok(arraysEqualish(pcaData0.dataProjected[2], [0, -0.24000000000000002]), 'dataProjected2');
  t.ok(arraysEqualish(pcaData0.dataProjected[3], [-0.4, 0.16]), 'dataProjected3');
  t.ok(arraysEqualish(pcaData0.dataProjected[4], [-0.9999999999999998, -0.039999999999999966]), 'dataProjected4');
  t.ok(arraysEqualish(pcaData0.basisVectors[0].slice(0,2).map(c => Math.abs(c)), // evec sign ambiguity
       [0.7071067811865476, 0.7071067811865476]),
       'basisVectors[0][0,1]');
  t.ok(pcaData0.basisVectors[0][2] === 'A', 'basisVectors[0][2]');
  t.ok(arraysEqualish(pcaData0.basisVectors[1].slice(0,2).map(c => Math.abs(c)),
       [0.7071067811865475, 0.7071067811865475]),
       'basisVectors[1][0,1]');
  t.ok(pcaData0.basisVectors[1][2] === 'B', 'basisVectors[1][2]');
  t.end();
});
